import type { OdFileObject } from '../../types'

import { FC, useEffect, useState, useRef } from 'react' // ðŸ‘ˆ ADDED useRef
import { useRouter } from 'next/router'

import axios from 'axios'
import toast from 'react-hot-toast'
import Plyr, { APITypes } from 'plyr-react' // ðŸ‘ˆ ADDED APITypes for the ref type
import { useAsync } from 'react-async-hook'
import { useClipboard } from 'use-clipboard-copy'

import { getBaseUrl } from '../../utils/getBaseUrl'
import { getExtension } from '../../utils/getFileIcon'
import { getStoredToken } from '../../utils/protectedRouteHandler'

import { DownloadButton } from '../DownloadBtnGtoup'
import { DownloadBtnContainer, PreviewContainer } from './Containers'
import FourOhFour from '../FourOhFour'
import Loading from '../Loading'
import CustomEmbedLinkMenu from '../CustomEmbedLinkMenu'

import 'plyr-react/plyr.css'

// NOTE: We no longer need the custom type definition 'type PlyrInstance = { plyr: { currentTime: number } }'
// because we are using APITypes from 'plyr-react'.

const VideoPlayer: FC<{
Â  videoName: string
Â  videoUrl: string
Â  width?: number
Â  height?: number
Â  thumbnail: string
Â  subtitle: string
Â  isFlv: boolean
Â  mpegts: any
}> = ({ videoName, videoUrl, width, height, thumbnail, subtitle, isFlv, mpegts }) => {
Â  // -------------------------------------------------------------
Â  // MODIFICATION 1: Setup ref for Plyr and skip logic
Â  // -------------------------------------------------------------
Â  const playerRef = useRef<APITypes | null>(null) // Use APITypes for the ref

Â  const handleSkip = (seconds: number) => {
Â  Â  if (playerRef.current && playerRef.current.plyr) {
Â  Â  Â  // Cast the plyr property to the Plyr instance to access its methods
Â  Â  Â  (playerRef.current.plyr as Plyr).currentTime += seconds
Â  Â  }
Â  }
Â  // -------------------------------------------------------------
Â  // END MODIFICATION 1
Â  // -------------------------------------------------------------

Â  useEffect(() => {
Â  Â  // Really really hacky way to inject subtitles as file blobs into the video element
Â  Â  axios
Â  Â  Â  .get(subtitle, { responseType: 'blob' })
Â  Â  Â  .then(resp => {
Â  Â  Â  Â  const track = document.querySelector('track')
Â  Â  Â  Â  track?.setAttribute('src', URL.createObjectURL(resp.data))
Â  Â  Â  })
Â  Â  Â  .catch(() => {
Â  Â  Â  Â  console.log('Could not load subtitle.')
Â  Â  Â  })

Â  Â  if (isFlv) {
Â  Â  Â  const loadFlv = () => {
Â  Â  Â  Â  // Really hacky way to get the exposed video element from Plyr
Â  Â  Â  Â  const video = document.getElementById('plyr')
Â  Â  Â  Â  const flv = mpegts.createPlayer({ url: videoUrl, type: 'flv' })
Â  Â  Â  Â  flv.attachMediaElement(video)
Â  Â  Â  Â  flv.load()
Â  Â  Â  }
Â  Â  Â  loadFlv()
Â  Â  }
Â  }, [videoUrl, isFlv, mpegts, subtitle])

Â  // Common plyr configs, including the video source and plyr options
Â  const plyrSource = {
Â  Â  type: 'video',
Â  Â  title: videoName,
Â  Â  poster: thumbnail,
Â  Â  tracks: [{ kind: 'captions', label: videoName, src: '', default: true }],
Â  }
Â  const plyrOptions: Plyr.Options = {
Â  Â  ratio: `${width ?? 16}:${height ?? 9}`,
Â  Â  fullscreen: { iosNative: true },
Â  Â  // -------------------------------------------------------------
Â  Â  // MODIFICATION 2: Add all necessary controls
Â  Â  // -------------------------------------------------------------
Â  Â  controls: [
      //'play-large',   // Large center play button
Â  Â  Â  //'restart',
Â  Â  Â  'rewind',Â  Â  Â  Â // Control bar skip backward
Â  Â  Â  'play',
Â  Â  Â  'fast-forward', // Control bar skip forward
Â  Â  Â  'progress',
Â  Â  Â  'current-time',
Â  Â  Â  'duration',
Â  Â  Â  'mute',
Â  Â  Â  'volume',
Â  Â  Â  'captions',
Â  Â  Â  'settings',
      //'pip',          // Picture-in-Picture
Â  Â  Â  //'fullscreen',
Â  Â  ],
Â  Â  // -------------------------------------------------------------
Â  Â  // END MODIFICATION 2
Â  Â  // -------------------------------------------------------------
Â  }
Â  if (!isFlv) {
Â  Â  // If the video is not in flv format, we can use the native plyr and add sources directly with the video URL
Â  Â  plyrSource['sources'] = [{ src: videoUrl }]
Â  }

Â  // -------------------------------------------------------------
Â  // MODIFICATION 3: Wrap Plyr with Skip Overlays for on-screen skip
Â  // -------------------------------------------------------------
Â  return (
Â  Â  <div style={{ position: 'relative', width: '100%' }}>
Â  Â  Â  {/* Skip Backward Overlay (Left Half) - Double-click/tap skips back 10s */}
Â  Â  Â  <div
Â  Â  Â  Â  className="absolute top-0 left-0 w-1/2 h-full z-10 cursor-pointer"
Â  Â  Â  Â  onDoubleClick={() => handleSkip(-10)}
Â  Â  Â  Â  aria-label="Skip backward 10 seconds"
Â  Â  Â  Â  title="Double-click to skip backward 10 seconds"
Â  Â  Â  />

Â  Â  Â  {/* Skip Forward Overlay (Right Half) - Double-click/tap skips forward 10s */}
Â  Â  Â  <div
Â  Â  Â  Â  className="absolute top-0 right-0 w-1/2 h-full z-10 cursor-pointer"
Â  Â  Â  Â  onDoubleClick={() => handleSkip(10)}
Â  Â  Â  Â  aria-label="Skip forward 10 seconds"
Â  Â  Â  Â  title="Double-click to skip forward 10 seconds"
Â  Â  Â  />

Â  Â  Â  {/* The Plyr player component, linked to playerRef */}
Â  Â  Â  <Plyr ref={playerRef} id="plyr" source={plyrSource as Plyr.SourceInfo} options={plyrOptions} />
Â  Â  </div>
Â  )
Â  // -------------------------------------------------------------
Â  // END MODIFICATION 3
Â  // -------------------------------------------------------------
}

const VideoPreview: FC<{ file: OdFileObject }> = ({ file }) => {
Â  const { asPath } = useRouter()
Â  const hashedToken = getStoredToken(asPath)
Â  const clipboard = useClipboard()

Â  const [menuOpen, setMenuOpen] = useState(false)

Â  // OneDrive generates thumbnails for its video files, we pick the thumbnail with the highest resolution
Â  const thumbnail = `/api/thumbnail?path=${asPath}&size=large${hashedToken ? `&odpt=${hashedToken}` : ''}`

Â  // We assume subtitle files are beside the video with the same name, only webvtt '.vtt' files are supported
Â  const vtt = `${asPath.substring(0, asPath.lastIndexOf('.'))}.vtt`
Â  const subtitle = `/api/raw?path=${vtt}${hashedToken ? `&odpt=${hashedToken}` : ''}`

Â  // We also format the raw video file for the in-browser player as well as all other players
Â  const videoUrl = `/api/raw?path=${asPath}${hashedToken ? `&odpt=${hashedToken}` : ''}`

Â  const isFlv = getExtension(file.name) === 'flv'
Â  const {
Â  Â  loading,
Â  Â  error,
Â  Â  result: mpegts,
Â  } = useAsync(async () => {
Â  Â  if (isFlv) {
Â  Â  Â  return (await import('mpegts.js')).default
Â  Â  }
Â  }, [isFlv])

Â  return (
Â  Â  <>
Â  Â  Â  <CustomEmbedLinkMenu path={asPath} menuOpen={menuOpen} setMenuOpen={setMenuOpen} />
Â  Â  Â  <PreviewContainer>
Â  Â  Â  Â  {error ? (
Â  Â  Â  Â  Â  <FourOhFour errorMsg={error.message} />
Â  Â  Â  Â  ) : loading && isFlv ? (
Â  Â  Â  Â  Â  <Loading loadingText={'Loading FLV extension...'} />
Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  <VideoPlayer
Â  Â  Â  Â  Â  Â  videoName={file.name}
Â  Â  Â  Â  Â  Â  videoUrl={videoUrl}
Â  Â  Â  Â  Â  Â  width={file.video?.width}
Â  Â  Â  Â  Â  Â  height={file.video?.height}
Â  Â  Â  Â  Â  Â  thumbnail={thumbnail}
Â  Â  Â  Â  Â  Â  subtitle={subtitle}
Â  Â  Â  Â  Â  Â  isFlv={isFlv}
Â  Â  Â  Â  Â  Â  mpegts={mpegts}
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  )}
Â  Â  Â  </PreviewContainer>

Â  Â  Â  <DownloadBtnContainer>
Â  Â  Â  Â  <div className="flex flex-wrap justify-center gap-2">
Â  Â  Â  Â  Â  <DownloadButton
Â  Â  Â  Â  Â  Â  onClickCallback={() => window.open(videoUrl)}
Â  Â  Â  Â  Â  Â  btnColor="blue"
Â  Â  Â  Â  Â  Â  btnText={'Download'}
Â  Â  Â  Â  Â  Â  btnIcon="file-download"
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  <DownloadButton
Â  Â  Â  Â  Â  Â  onClickCallback={() => {
Â  Â  Â  Â  Â  Â  Â  clipboard.copy(`${getBaseUrl()}/api/raw?path=${asPath}${hashedToken ? `&odpt=${hashedToken}` : ''}`)
Â  Â  Â  Â  Â  Â  Â  toast.success('Copied direct link to clipboard.')
Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  btnColor="pink"
Â  Â  Â  Â  Â  Â  btnText={'Copy direct link'}
Â  Â  Â  Â  Â  Â  btnIcon="copy"
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  </div>
Â  Â  Â  </DownloadBtnContainer>
Â  Â  </>
Â  )
}

export default VideoPreview
